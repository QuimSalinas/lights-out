{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{Component,forwardRef}from\"react\";import Cell from\"./Cell\";import'./Board.css';/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/class Board extends Component{constructor(props){super(props);this.reset=()=>{this.setState({hasWon:false,board:this.createBoard()});};this.state={hasWon:false,board:this.createBoard()};this.flipCellsAround=this.flipCellsAround.bind(this);}/** create a board nrows high/ncols wide, each cell randomly lit or unlit */createBoard(){let board=new Array(this.props.nrows);let aux;for(let i=0;i<board.length;i++){board[i]=new Array(this.props.ncols);for(let j=0;j<board[i].length;j++){aux=Math.random();if(aux<=this.props.chanceLightStartsOn)board[i][j]=true;else board[i][j]=false;}}return board;}/** handle changing a cell: update board & determine if winner */flipCellsAround(coord){let _this$props=this.props,ncols=_this$props.ncols,nrows=_this$props.nrows;let board=this.state.board;let _coord$split$map=coord.split(\"-\").map(Number),_coord$split$map2=_slicedToArray(_coord$split$map,2),y=_coord$split$map2[0],x=_coord$split$map2[1];let hasWon=true;function flipCell(y,x){// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){board[y][x]=!board[y][x];}}flipCell(y,x);flipCell(y+1,x);flipCell(y-1,x);flipCell(y,x+1);flipCell(y,x-1);// win when every cell is turned off\n// TODO: determine is the game has been won\nfor(let i=0;i<board.length;i++){for(let j=0;j<board[i].length;j++){if(hasWon===false)break;if(board[i][j]===true){hasWon=false;break;}}}this.setState({board,hasWon});}/** Render game board or winning message. */render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"Board\"},/*#__PURE__*/React.createElement(\"h1\",null,/*#__PURE__*/React.createElement(\"span\",{className:this.state.hasWon?\"Gray-title\":\"Board-title1\"},\"LIGHTS\"),/*#__PURE__*/React.createElement(\"span\",{className:this.state.hasWon?\"Gray-title\":\"Board-title2\"},\"OUT\")),this.state.hasWon?/*#__PURE__*/React.createElement(\"h2\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"Board-title2\"},\"YOU\"),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"Board-title1\"},\"WIN\")):/*#__PURE__*/React.createElement(\"div\",{className:\"Board-tableGradient\"},/*#__PURE__*/React.createElement(\"table\",null,/*#__PURE__*/React.createElement(\"tbody\",null,this.state.board.map((row,rowidx)=>/*#__PURE__*/React.createElement(\"tr\",{key:rowidx},row.map((column,colidx)=>/*#__PURE__*/React.createElement(Cell,{key:\"\".concat(colidx,\"-\").concat(rowidx),isLit:column,flipCellsAroundMe:this.flipCellsAround,coords:\"\".concat(rowidx,\"-\").concat(colidx)}))))))),/*#__PURE__*/React.createElement(\"div\",{className:\"Board-button\"},/*#__PURE__*/React.createElement(\"button\",{className:\"Board-button-reset\",onClick:this.reset},\"RESET\")));}}Board.defaultProps={nrows:5,ncols:5,chanceLightStartsOn:0.5};export default Board;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/lights-out/src/Board.js"],"names":["React","Component","forwardRef","Cell","Board","constructor","props","reset","setState","hasWon","board","createBoard","state","flipCellsAround","bind","Array","nrows","aux","i","length","ncols","j","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","render","row","rowidx","column","colidx","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, forwardRef} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.5\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.flipCellsAround=this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = new Array(this.props.nrows);\n    let aux;\n    for(let i=0;i<board.length;i++){\n      board[i]=new Array(this.props.ncols);\n      for(let j=0; j<board[i].length; j++){\n        aux=Math.random();\n        if(aux<=this.props.chanceLightStartsOn) board[i][j]=true;\n        else board[i][j]=false;\n      }\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    let hasWon=true;\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y-1,x);\n    flipCell(y,x+1);\n    flipCell(y,x-1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    for(let i=0;i<board.length;i++){\n      for(let j=0;j<board[i].length;j++){\n          if(hasWon===false) break;\n        if(board[i][j]===true){\n          hasWon=false;\n          break;\n        } \n      }\n    }\n    this.setState({board, hasWon});\n  }\n\n  /** Render game board or winning message. */\n  reset = ()=>{\n    this.setState({hasWon: false, board: this.createBoard()});\n  }\n\n  render() {\n    return(\n      <div className=\"Board\">\n      <h1><span className={this.state.hasWon?\"Gray-title\":\"Board-title1\"}>LIGHTS</span><span className={this.state.hasWon?\"Gray-title\":\"Board-title2\"}>OUT</span></h1>\n      {\n          this.state.hasWon\n        ? <h2><span className=\"Board-title2\">YOU</span> <span className=\"Board-title1\">WIN</span></h2>\n        : <div className=\"Board-tableGradient\">\n            <table>\n              <tbody>\n                {this.state.board.map((row,rowidx)=>\n                  <tr key={rowidx}>\n                    {row.map((column,colidx)=><Cell key={`${colidx}-${rowidx}`} isLit={column} flipCellsAroundMe={this.flipCellsAround} coords={`${rowidx}-${colidx}`}/>)}\n                  </tr>)}\n              </tbody>\n            </table>\n          </div>\n      }\n      <div className=\"Board-button\">\n        <button className=\"Board-button-reset\" onClick={this.reset}>RESET</button>\n      </div>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
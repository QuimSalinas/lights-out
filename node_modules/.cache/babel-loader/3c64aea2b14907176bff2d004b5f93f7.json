{"ast":null,"code":"import React,{Component}from'react';import\"./Cell.css\";/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/class Cell extends Component{constructor(props){super(props);this.handleClick=this.handleClick.bind(this);}handleClick(evt){// call up to the board to flip cells around this cell\nthis.props.flipCellsAroundMe(this.props.coords);}render(){let classes=\"Cell\"+(this.props.isLit?\" Cell-lit\":\"\");return/*#__PURE__*/React.createElement(\"td\",{className:classes,onClick:this.handleClick});}}export default Cell;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/lights-out/src/Cell.js"],"names":["React","Component","Cell","constructor","props","handleClick","bind","evt","flipCellsAroundMe","coords","render","classes","isLit"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAO,YAAP,CAGA;;;;;;;;;;;IAaA,KAAMC,CAAAA,IAAN,QAAmBD,CAAAA,SAAU,CAC3BE,WAAW,CAACC,KAAD,CAAQ,CACjB,MAAMA,KAAN,EACA,KAAKC,WAAL,CAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB,CACD,CAEDD,WAAW,CAACE,GAAD,CAAM,CACf;AACA,KAAKH,KAAL,CAAWI,iBAAX,CAA6B,KAAKJ,KAAL,CAAWK,MAAxC,EACD,CAEDC,MAAM,EAAG,CACP,GAAIC,CAAAA,OAAO,CAAG,QAAU,KAAKP,KAAL,CAAWQ,KAAX,CAAmB,WAAnB,CAAiC,EAA3C,CAAd,CAEA,mBACI,0BAAI,SAAS,CAAED,OAAf,CAAwB,OAAO,CAAE,KAAKN,WAAtC,EADJ,CAGD,CAjB0B,CAqB7B,cAAeH,CAAAA,IAAf","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coords);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell"]},"metadata":{},"sourceType":"module"}
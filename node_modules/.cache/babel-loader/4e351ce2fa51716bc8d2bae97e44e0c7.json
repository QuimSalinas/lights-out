{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component, forwardRef } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = new Array(this.props.ncols);\n    let aux;\n\n    for (let i = 0; i < board.length; i++) {\n      board[i] = new Array(this.props.nrows);\n\n      for (let j = 0; j < board[i].length; j++) {\n        aux = Math.random();\n        if (aux <= this.props.chanceLightStartsOn) board[i][j] = true;else board[i][j] = false;\n      }\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    let _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n    let board = this.state.board;\n\n    let _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    let hasWon = true;\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y + 1, x + 1);\n    flipCell(y, x + 1); // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (hasWon === false) break;\n\n        if (board[i][j] === true) {\n          hasWon = false;\n          break;\n        }\n      }\n    }\n\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n  /** Render game board or winning message. */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, this.state.hasWon ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"YOU WIN\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, this.state.board.map(column => element.map(row => /*#__PURE__*/React.createElement(Cell, {\n      isLit: row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 58\n      }\n    }))))); // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n  }\n\n}\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3,\n  chanceLightStartsOn: 0.5\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/lights-out/src/Board.js"],"names":["React","Component","forwardRef","Cell","Board","constructor","props","state","hasWon","board","createBoard","Array","ncols","aux","i","length","nrows","j","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","y","x","flipCell","setState","render","column","element","row","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, forwardRef} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3,\n    chanceLightStartsOn: 0.5\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = new Array(this.props.ncols);\n    let aux;\n    for(let i=0;i<board.length;i++){\n      board[i]=new Array(this.props.nrows);\n      for(let j=0; j<board[i].length; j++){\n        aux=Math.random();\n        if(aux<=this.props.chanceLightStartsOn) board[i][j]=true;\n        else board[i][j]=false;\n      }\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    let hasWon=true;\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y+1,x+1);\n    flipCell(y,x+1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    for(let i=0;i<board.length;i++){\n      for(let j=0;j<board[i].length;j++){\n          if(hasWon===false) break;\n        if(board[i][j]===true){\n          hasWon=false;\n          break;\n        } \n      }\n    }\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return(\n      <div>\n      {\n          this.state.hasWon\n        ? <h1>YOU WIN</h1>\n        : <div>\n          {this.state.board.map(column=>element.map(row=><Cell isLit={row}/>))}\n        </div>\n      }\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
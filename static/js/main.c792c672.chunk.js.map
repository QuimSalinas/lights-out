{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","Component","constructor","props","super","this","handleClick","bind","evt","flipCellsAroundMe","coords","render","classes","isLit","className","onClick","Board","reset","setState","hasWon","board","createBoard","state","flipCellsAround","aux","Array","nrows","i","length","ncols","j","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","row","rowidx","key","column","colidx","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c792c672.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coords);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component, forwardRef} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.5\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.flipCellsAround=this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = new Array(this.props.nrows);\n    let aux;\n    for(let i=0;i<board.length;i++){\n      board[i]=new Array(this.props.ncols);\n      for(let j=0; j<board[i].length; j++){\n        aux=Math.random();\n        if(aux<=this.props.chanceLightStartsOn) board[i][j]=true;\n        else board[i][j]=false;\n      }\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    let hasWon=true;\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y-1,x);\n    flipCell(y,x+1);\n    flipCell(y,x-1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    for(let i=0;i<board.length;i++){\n      for(let j=0;j<board[i].length;j++){\n          if(hasWon===false) break;\n        if(board[i][j]===true){\n          hasWon=false;\n          break;\n        } \n      }\n    }\n    this.setState({board, hasWon});\n  }\n\n  /** Render game board or winning message. */\n  reset = ()=>{\n    this.setState({hasWon: false, board: this.createBoard()});\n  }\n\n  render() {\n    return(\n      <div className=\"Board\">\n      <h1><span className={this.state.hasWon?\"Gray-title\":\"Board-title1\"}>LIGHTS</span><span className={this.state.hasWon?\"Gray-title\":\"Board-title2\"}>OUT</span></h1>\n      {\n          this.state.hasWon\n        ? <h2><span className=\"Board-title2\">YOU</span> <span className=\"Board-title1\">WIN</span></h2>\n        : <div className=\"Board-tableGradient\">\n            <table>\n              <tbody>\n                {this.state.board.map((row,rowidx)=>\n                  <tr key={rowidx}>\n                    {row.map((column,colidx)=><Cell key={`${colidx}-${rowidx}`} isLit={column} flipCellsAroundMe={this.flipCellsAround} coords={`${rowidx}-${colidx}`}/>)}\n                  </tr>)}\n              </tbody>\n            </table>\n          </div>\n      }\n      <div className=\"Board-button\">\n        <button className=\"Board-button-reset\" onClick={this.reset}>RESET</button>\n      </div>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}